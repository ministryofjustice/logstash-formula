{% from "logstash/map.jinja" import logstash with context %}


filter {
  if [type] == "syslog" {
    grok {
      match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
    if !("_grokparsefailure" in [tags]) {
      mutate {
        replace => [ "host", "%{syslog_hostname}" ]
      }
    }
    mutate {
      remove_field => [ "syslog_hostname", "syslog_timestamp" ]
    }
    if [syslog_message] =~ "IPTables" {
      grok {
        match => { "syslog_message" => "IPTables-Dropped: %{IPTABLES}"}
        patterns_dir => ["/etc/logstash/patterns"]
      }
    }
    date {
      match => [ "received_at", "yyyy-MM-dd HH:mm:ss z" ]
      target => "received_at"
    }
  }
}

# auditd and apparmor
filter {
  if 'audit' in [tags] {
    # If auditd is running apparmor will log to it.
    grok {
      patterns_dir => "/etc/logstash/patterns"
      match => [
                "message", "%{AUDIT}",
                "message", "%{AUDITLOGIN}",
                "message", "%{AUDITOTHER}",
                "message", "%{AUDIT_APPARMOR}"
               ]
    }
    kv {}
    if [audit_type] == "AVC" {
      mutate {
        replace => ["tags", "apparmor"]
      }
    }
  }
  # If auditd is not running, Apparmor falls back to logging via syslog
  if [syslog_facility] == 'kernel' and [syslog_message] =~ "apparmor" {
    grok {
      patterns_dir => "/etc/logstash/patterns"
      match => [ "message", "%{APPARMOR}" ]
    }
    kv {
      prefix => "syslog_apparmor_"
    }
    if [type] == '1400' {
      mutate {
        replace => ["tags", "apparmor"]
      }
    }
  }
}


