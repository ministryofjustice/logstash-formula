{% from "logstash/map.jinja" import logstash with context %}

# based on: http://cookbook.logstash.net/recipes/syslog-pri/
input {
    tcp {
        port => 2514
        type => syslog
    }
    udp {
        port => 2514
        type => syslog
    }
    redis {
        host => '{{logstash.redis}}'
        data_type => list
        key => 'logstash:beaver'
        type => 'logstash:beaver'
    }
}


filter {
  if [type] == "syslog" {
    grok {
      match => { "message" => "IPTables-Dropped: %{IPTABLES}"}
      patterns_dir => ["/etc/logstash/patterns"]
    }
    grok {
      match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
    if !("_grokparsefailure" in [tags]) {
      mutate {
        replace => [ "@source_host", "%{syslog_hostname}" ]
        replace => [ "@message", "%{syslog_message}" ]
      }
    }
    mutate {
      remove_field => [ "syslog_hostname", "syslog_message", "syslog_timestamp" ]
    }
  }
    if 'audit' in [tags] {
        grok {
            patterns_dir => "/etc/logstash/patterns"
            match => [
                "message", "%{AUDIT}",
                "message", "%{AUDITLOGIN}",
                "message", "%{AUDITOTHER}"
            ]
        }
    }
}


output {
    elasticsearch_http {
        host => "localhost"
        flush_size => 1
    }
}

